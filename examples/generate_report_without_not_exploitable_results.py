# -*- coding: UTF-8 -*-
import time

from datetime import datetime
from os.path import exists, join, normpath

from CheckmarxPythonSDK.CxRestAPISDK import ProjectsAPI, ScansAPI
from CheckmarxPythonSDK.CxPortalSoapApiSDK import create_scan_report


def get_last_scan_id_of_a_project(team_full_name, project_name):
    """

    Args:
        team_full_name (str):
        project_name (str):

    Returns:
        scan_id (int)
    """
    projects_api = ProjectsAPI()
    scan_api = ScansAPI()
    project_id = projects_api.get_project_id_by_project_name_and_team_full_name(project_name=project_name,
                                                                                team_full_name=team_full_name)
    return scan_api.get_last_scan_id_of_a_project(project_id=project_id, only_finished_scans=True)


def get_result_state_id_list(result_state_list):
    """

    Args:
        result_state_list (list of str):

    Returns:
        result_state_id_list (list of int)
    """
    all_result_state_list = ["To Verify", "Not Exploitable", "Confirmed", "Urgent", "Proposed Not Exploitable"]
    result_state_id_list = list()
    for result_state in result_state_list:
        try:
            result_state_id = all_result_state_list.index(result_state)
            result_state_id_list.append(result_state_id)
        except ValueError:
            print("result state: {} Not found".format(result_state))
    return result_state_id_list


def generate_report(project_name, scan_id, result_state_list, report_type, reports_folder):
    """

    Args:
        project_name (str):
        scan_id (int):
        result_state_list (list of str):   ["To Verify", "Not Exploitable", "Confirmed", "Urgent",
                                            "Proposed Not Exploitable"]
        report_type (str): ('XML', 'PDF')
        reports_folder (str):

    Returns:

    """
    scan_api = ScansAPI()

    if not exists(normpath(reports_folder)):
        print("The folder to store the Checkmarx scan reports does not exist")
        return

    if not scan_id:
        print("No scan found for this project, team full name: {}, project name: {}".format(team,
                                                                                            project))
        return

    # register scan report
    report = create_scan_report(
        scan_id=scan_id,
        report_type=report_type,
        results_per_vulnerability_maximum=500,
        results_state_all=False,
        results_state_ids=get_result_state_id_list(result_state_list)
    )
    report_id = report["ID"]

    # get report status by id
    while not scan_api.is_report_generation_finished(report_id):
        time.sleep(10)

    # get report by id
    report_content = scan_api.get_report_by_id(report_id)

    # write report content into a file
    time_stamp = datetime.now().strftime('_%Y_%m_%d_%H_%M_%S')
    name = project_name + time_stamp + "." + report_type
    file_name = normpath(join(reports_folder, name))

    with open(str(file_name), "wb") as f_out:
        f_out.write(report_content)


if __name__ == '__main__':
    folder = r'.'
    team = "/CxServer"
    project = "jvl_git"
    result_state_for_reports = ["To Verify", "Confirmed", "Urgent"]
    last_scan_id = get_last_scan_id_of_a_project(team_full_name=team, project_name=project)
    generate_report(
        project_name=project,
        scan_id=last_scan_id,
        result_state_list=result_state_for_reports,
        report_type="XML",
        reports_folder=folder
    )
    generate_report(
        project_name=project,
        scan_id=last_scan_id,
        report_type="PDF",
        result_state_list=result_state_for_reports,
        reports_folder=folder
    )
